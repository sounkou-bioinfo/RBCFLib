#!/usr/bin/env Rscript

# RBcftools - R-based CLI for bcftools using RBCFLib
# This script provides a command-line interface to bcftools functionality
# through the RBCFLib package's BCFToolsRun function.

# Load RBCFLib
if (!requireNamespace("RBCFLib", quietly = TRUE)) {
    cat("Error: RBCFLib package is required but not installed\n", file = stderr())
    cat("Please install the package using: install.packages('RBCFLib')\n", file = stderr())
    quit(status = 1)
}

suppressPackageStartupMessages(library(RBCFLib))

# Display help information
ShowHelp <- function() {
    cat("RBcftools - An R-based CLI for bcftools using RBCFLib\n\n")
    cat("Usage: RBcftools [command] [options]\n\n")
    cat("Commands:\n")
    validCommands <- c(
        "version", "view", "index", "query", "call", "mpileup", "concat",
        "merge", "norm", "stats", "annotate", "cnv", "consensus",
        "convert", "csq", "filter", "gtcheck", "plugin", "roh",
        "isec", "reheader", "sort", "head", "help"
    )
    for (cmd in validCommands) {
        cat("  ", cmd, "\n")
    }
    cat("\nType 'RBcftools help [command]' for help on a specific command\n")
    cat("\nRBcftools wraps the BCFToolsRun function from RBCFLib\n")
}

# Main function
Main <- function() {
    # Get command-line arguments
    args <- commandArgs(trailingOnly = TRUE)

    # Check if no arguments provided
    if (length(args) == 0) {
        ShowHelp()
        quit(status = 1)
    }

    # Extract command (first argument)
    command <- args[1]

    # Check if command is "help"
    if (command == "help") {
        if (length(args) > 1) {
            # Help for specific command
            result <- BCFToolsRun(args[2], "--help", isUsage = TRUE)
            if (result$status == 0) {
                cat(result$stderr, sep = "\n")
            } else {
                cat("Error: Invalid command or help request failed\n")
                quit(status = 1)
            }
        } else {
            ShowHelp()
        }
        quit(status = 0)
    }

    # Process remaining arguments
    cmdArgs <- if (length(args) > 1) args[2:length(args)] else character()

    # Check for output redirection
    outputFile <- NULL
    isOutputSpecified <- FALSE

    for (i in seq_along(cmdArgs)) {
        if (cmdArgs[i] == "-o" || cmdArgs[i] == "--output") {
            if (i < length(cmdArgs)) {
                outputFile <- cmdArgs[i + 1]
                isOutputSpecified <- TRUE
                break
            }
        } else if (startsWith(cmdArgs[i], "-o=") || startsWith(cmdArgs[i], "--output=")) {
            outputFile <- sub("^-o=|^--output=", "", cmdArgs[i])
            isOutputSpecified <- TRUE
            break
        }
    }

    # Run bcftools command through BCFToolsRun
    result <- BCFToolsRun(
        command = command,
        args = cmdArgs,
        catchStdout = TRUE,
        catchStderr = TRUE,
        saveStdout = outputFile,
        isUsage = FALSE
    )

    # Print error messages to stderr
    if (!is.null(result$stderr) && length(result$stderr) > 0) {
        cat(result$stderr, sep = "\n", file = stderr())
    }

    # Print stdout to console if not redirected to file
    if (!is.null(result$stdout) && length(result$stdout) > 0 && !isOutputSpecified) {
        cat(result$stdout, sep = "\n")
    }

    # Return exit code from bcftools
    quit(status = result$status)
}

# Run main function
Main()
