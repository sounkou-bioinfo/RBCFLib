#!/usr/bin/env Rscript

# BCFToolsLiftover - Command-line interface for BCFTools liftover
# Usage: BCFToolsLiftover [options] <input_vcf> <chain_file>
#
# Converts variant coordinates between genome assemblies

suppressPackageStartupMessages(library(RBCFLib))

# Define usage info
usage <- function() {
    cat("Usage: BCFToolsLiftover [options] <input_vcf> <chain_file>\n")
    cat("\nOptions:\n")
    cat("  -c, --chain FILE          Chain file for mapping old to new assembly\n")
    cat("  -f, --fasta-ref FILE      Reference sequence in FASTA format\n")
    cat("  -r, --regions REGION      Restrict to comma-separated list of regions\n")
    cat("      --regions-file FILE   Restrict to regions listed in file\n")
    cat("  -t, --targets REGION      Similar to --regions but streams rather than index-jumps\n")
    cat("      --targets-file FILE   Similar to --regions-file but streams rather than index-jumps\n")
    cat("      --flip-tag TAG        INFO tag to mark reverse-complemented sites\n")
    cat("      --swap-tag TAG        INFO tag to mark swapped REF/ALT sites\n")
    cat("      --drop-tags LIST      Comma-separated list of tags to drop\n")
    cat("      --ac-tags LIST        Comma-separated list of allele count tags to adjust\n")
    cat("      --af-tags LIST        Comma-separated list of allele frequency tags to adjust\n")
    cat("      --ds-tags LIST        Comma-separated list of dosage tags to adjust\n")
    cat("      --gt-tags LIST        Comma-separated list of genotype tags to adjust\n")
    cat("      --es-tags LIST        Comma-separated list of effect size tags to adjust\n")
    cat("      --tags LIST           List of tags to convert (can be specified multiple times)\n")
    cat("  -o, --output-file FILE    Write output to a file\n")
    cat("  -O, --output-type TYPE    b: compressed BCF, u: uncompressed BCF, z: compressed VCF, v: uncompressed VCF\n")
    cat("      --threads INT         Number of extra output compression threads [0]\n")
    cat("  -W, --write-index         Automatically index the output file\n")
    cat("  -h, --help                Show this help message and exit\n")
    quit(status = 0)
}

# Process command line arguments
args <- commandArgs(trailingOnly = TRUE)
if (length(args) < 2 || "--help" %in% args || "-h" %in% args) {
    usage()
}

# Initialize parameter list
params <- list(
    fasta_ref = NULL,
    regions = NULL,
    regions_file = NULL,
    targets = NULL,
    targets_file = NULL,
    flip_tag = NULL,
    swap_tag = NULL,
    drop_tags = NULL,
    ac_tags = NULL,
    af_tags = NULL,
    ds_tags = NULL,
    gt_tags = NULL,
    es_tags = NULL,
    tags = NULL,
    output_file = NULL,
    output_type = NULL,
    threads = NULL,
    write_index = FALSE
)

# Parse arguments
i <- 1
positional_args <- c()

while (i <= length(args)) {
    arg <- args[i]
    if (arg %in% c("-c", "--chain") && i < length(args)) {
        # Chain file is handled as a positional argument
        i <- i + 2
    } else if (arg %in% c("-f", "--fasta-ref") && i < length(args)) {
        params$fasta_ref <- args[i + 1]
        i <- i + 2
    } else if (arg %in% c("-r", "--regions") && i < length(args)) {
        params$regions <- args[i + 1]
        i <- i + 2
    } else if (arg == "--regions-file" && i < length(args)) {
        params$regions_file <- args[i + 1]
        i <- i + 2
    } else if (arg %in% c("-t", "--targets") && i < length(args)) {
        params$targets <- args[i + 1]
        i <- i + 2
    } else if (arg == "--targets-file" && i < length(args)) {
        params$targets_file <- args[i + 1]
        i <- i + 2
    } else if (arg == "--flip-tag" && i < length(args)) {
        params$flip_tag <- args[i + 1]
        i <- i + 2
    } else if (arg == "--swap-tag" && i < length(args)) {
        params$swap_tag <- args[i + 1]
        i <- i + 2
    } else if (arg == "--drop-tags" && i < length(args)) {
        params$drop_tags <- args[i + 1]
        i <- i + 2
    } else if (arg == "--ac-tags" && i < length(args)) {
        params$ac_tags <- args[i + 1]
        i <- i + 2
    } else if (arg == "--af-tags" && i < length(args)) {
        params$af_tags <- args[i + 1]
        i <- i + 2
    } else if (arg == "--ds-tags" && i < length(args)) {
        params$ds_tags <- args[i + 1]
        i <- i + 2
    } else if (arg == "--gt-tags" && i < length(args)) {
        params$gt_tags <- args[i + 1]
        i <- i + 2
    } else if (arg == "--es-tags" && i < length(args)) {
        params$es_tags <- args[i + 1]
        i <- i + 2
    } else if (arg == "--tags" && i < length(args)) {
        params$tags <- args[i + 1]
        i <- i + 2
    } else if (arg %in% c("-o", "--output-file") && i < length(args)) {
        params$output_file <- args[i + 1]
        i <- i + 2
    } else if (arg %in% c("-O", "--output-type") && i < length(args)) {
        params$output_type <- args[i + 1]
        i <- i + 2
    } else if (arg == "--threads" && i < length(args)) {
        params$threads <- as.integer(args[i + 1])
        i <- i + 2
    } else if (arg %in% c("-W", "--write-index")) {
        params$write_index <- TRUE
        i <- i + 1
    } else if (substring(arg, 1, 1) == "-") {
        cat("Unknown option:", arg, "\n")
        usage()
    } else {
        # This must be a positional argument
        positional_args <- c(positional_args, arg)
        i <- i + 1
    }
}

# Check if both required positional arguments are provided
if (length(positional_args) < 2) {
    cat("Error: Both input VCF and chain file must be specified\n")
    usage()
}

input_vcf <- positional_args[1]
chain_file <- positional_args[2]

# Execute the function
result <- BCFToolsLiftover(
    InputFileName = input_vcf,
    ChainFile = chain_file,
    FastaRef = params$fasta_ref,
    Regions = params$regions,
    RegionsFile = params$regions_file,
    Targets = params$targets,
    TargetsFile = params$targets_file,
    FlipTag = params$flip_tag,
    SwapTag = params$swap_tag,
    DropTags = params$drop_tags,
    ACTags = params$ac_tags,
    AFTags = params$af_tags,
    DSTags = params$ds_tags,
    GTTags = params$gt_tags,
    ESTags = params$es_tags,
    Tags = params$tags,
    OutputFile = params$output_file,
    OutputType = params$output_type,
    NumThreads = params$threads,
    WriteIndex = params$write_index
)

# Print command and exit status
cat("Command:", result$command, "\n")
cat("Exit status:", result$status, "\n")

# Print any stderr messages
if (!is.null(result$stderr)) {
    cat("\nStandard Error:\n")
    cat(result$stderr, sep = "\n")
}

# Exit with the same status as the command
quit(status = result$status)
