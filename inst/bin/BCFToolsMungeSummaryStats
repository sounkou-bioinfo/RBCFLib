#!/usr/bin/env Rscript

# BCFToolsMungeSummaryStats - CLI wrapper for BCFToolsMunge function
# This script provides a command-line interface to the BCFToolsMunge function
# for converting different formats of summary statistics to GWAS-VCF format.

# Load RBCFLib
if (!requireNamespace("RBCFLib", quietly = TRUE)) {
    cat("Error: RBCFLib package is required but not installed\n", file = stderr())
    cat("Please install the package using: install.packages('RBCFLib')\n", file = stderr())
    quit(status = 1)
}

suppressPackageStartupMessages(library(RBCFLib))

# Display help information
ShowHelp <- function() {
    cat("BCFToolsMungeSummaryStats - Convert summary statistics to GWAS-VCF format using RBCFLib\n\n")
    cat("Usage: BCFToolsMungeSummaryStats [options] <input file>\n\n")
    cat("Plugin options:\n")
    cat("  -c, --columns=<preset>          Column headers from preset (PLINK/PLINK2/REGENIE/SAIGE/BOLT/METAL/PGS/SSF)\n")
    cat("  -C, --headers-file=<file>       Column headers from tab-delimited file\n")
    cat("  -f, --fasta=<file>              Reference sequence in fasta format\n")
    cat("      --fai=<file>                Reference sequence .fai index\n")
    cat("      --set-cache-size=<int>      Select fasta cache size in bytes\n")
    cat("      --iffy-tag=<string>         FILTER annotation tag to record whether reference allele could not be determined\n")
    cat("      --mismatch-tag=<string>     FILTER annotation tag to record whether reference does not match any allele\n")
    cat("  -s, --study=<string>            Sample name for the phenotype [SAMPLE]\n")
    cat("      --ns=<float>                Number of samples\n")
    cat("      --nc=<float>                Number of cases\n")
    cat("      --ne=<float>                Effective sample size\n")
    cat("      --no-version                Do not append version and command line to the header\n")
    cat("  -o, --output=<file>             Write output to a file [no output]\n")
    cat("  -O, --output-type=u|b|v|z[0-9]  u/b: un/compressed BCF, v/z: un/compressed VCF, 0-9: compression level [v]\n")
    cat("      --threads=<int>             Use multithreading with INT worker threads [0]\n")
    cat("  -W, --write-index[=FMT]         Automatically index the output files [off]\n")
    cat("\n")
    cat("Examples:\n")
    cat("      BCFToolsMungeSummaryStats -c PLINK -f human_g1k_v37.fasta -O b -o score.bcf score.assoc\n")
    cat("      BCFToolsMungeSummaryStats -C colheaders.tsv -f human_g1k_v37.fasta -s SCZ_2022 -O b -o PGC3_SCZ.bcf PGC3_SCZ.tsv.gz\n")
    cat("\n")
    cat("This tool converts summary statistics to GWAS-VCF format using the\n")
    cat("BCFToolsMunge function from RBCFLib.\n")
}

# Parse command line arguments
args <- commandArgs(trailingOnly = TRUE)

if (length(args) == 0 || "--help" %in% args || "-h" %in% args) {
    ShowHelp()
    quit(status = 0)
}

# Initialize parameters
preset_columns <- NULL # -c/--columns
headers_file <- NULL # -C/--headers-file
fasta_file <- NULL # -f/--fasta
fai_file <- NULL # --fai
cache_size <- NULL # --set-cache-size
iffy_tag <- NULL # --iffy-tag
mismatch_tag <- NULL # --mismatch-tag
study_name <- NULL # -s/--study
sample_size <- NULL # --ns
case_count <- NULL # --nc
eff_sample_size <- NULL # --ne
no_version <- FALSE # --no-version
output_file <- NULL # -o/--output
output_type <- NULL # -O/--output-type
threads <- NULL # --threads
write_index <- NULL # -W/--write-index
input_file <- NULL

# Parse command line arguments
i <- 1
while (i <= length(args)) {
    arg <- args[i]

    # Handle short options
    if (startsWith(arg, "-") && !startsWith(arg, "--") && nchar(arg) > 1) {
        opt <- substring(arg, 2, 2)
        val <- if (nchar(arg) > 2) substring(arg, 3) else NULL

        if (opt == "c") {
            if (is.null(val) && i < length(args)) {
                preset_columns <- args[i + 1]
                i <- i + 1
            } else {
                preset_columns <- val
            }
        } else if (opt == "C") {
            if (is.null(val) && i < length(args)) {
                headers_file <- args[i + 1]
                i <- i + 1
            } else {
                headers_file <- val
            }
        } else if (opt == "f") {
            if (is.null(val) && i < length(args)) {
                fasta_file <- args[i + 1]
                i <- i + 1
            } else {
                fasta_file <- val
            }
        } else if (opt == "s") {
            if (is.null(val) && i < length(args)) {
                study_name <- args[i + 1]
                i <- i + 1
            } else {
                study_name <- val
            }
        } else if (opt == "o") {
            if (is.null(val) && i < length(args)) {
                output_file <- args[i + 1]
                i <- i + 1
            } else {
                output_file <- val
            }
        } else if (opt == "O") {
            if (is.null(val) && i < length(args)) {
                output_type <- args[i + 1]
                i <- i + 1
            } else {
                output_type <- val
            }
        } else if (opt == "W") {
            write_index <- if (is.null(val)) TRUE else val
        } else if (opt == "h") {
            ShowHelp()
            quit(status = 0)
        }
    }
    # Handle long options
    else if (startsWith(arg, "--")) {
        if (arg == "--help") {
            ShowHelp()
            quit(status = 0)
        } else if (startsWith(arg, "--columns=")) {
            preset_columns <- sub("^--columns=", "", arg)
        } else if (arg == "--columns" && i < length(args)) {
            preset_columns <- args[i + 1]
            i <- i + 1
        } else if (startsWith(arg, "--headers-file=")) {
            headers_file <- sub("^--headers-file=", "", arg)
        } else if (arg == "--headers-file" && i < length(args)) {
            headers_file <- args[i + 1]
            i <- i + 1
        } else if (startsWith(arg, "--fasta=")) {
            fasta_file <- sub("^--fasta=", "", arg)
        } else if (arg == "--fasta" && i < length(args)) {
            fasta_file <- args[i + 1]
            i <- i + 1
        } else if (startsWith(arg, "--fai=")) {
            fai_file <- sub("^--fai=", "", arg)
        } else if (arg == "--fai" && i < length(args)) {
            fai_file <- args[i + 1]
            i <- i + 1
        } else if (startsWith(arg, "--set-cache-size=")) {
            cache_size <- as.integer(sub("^--set-cache-size=", "", arg))
        } else if (arg == "--set-cache-size" && i < length(args)) {
            cache_size <- as.integer(args[i + 1])
            i <- i + 1
        } else if (startsWith(arg, "--iffy-tag=")) {
            iffy_tag <- sub("^--iffy-tag=", "", arg)
        } else if (arg == "--iffy-tag" && i < length(args)) {
            iffy_tag <- args[i + 1]
            i <- i + 1
        } else if (startsWith(arg, "--mismatch-tag=")) {
            mismatch_tag <- sub("^--mismatch-tag=", "", arg)
        } else if (arg == "--mismatch-tag" && i < length(args)) {
            mismatch_tag <- args[i + 1]
            i <- i + 1
        } else if (startsWith(arg, "--study=")) {
            study_name <- sub("^--study=", "", arg)
        } else if (arg == "--study" && i < length(args)) {
            study_name <- args[i + 1]
            i <- i + 1
        } else if (startsWith(arg, "--ns=")) {
            sample_size <- as.numeric(sub("^--ns=", "", arg))
        } else if (arg == "--ns" && i < length(args)) {
            sample_size <- as.numeric(args[i + 1])
            i <- i + 1
        } else if (startsWith(arg, "--nc=")) {
            case_count <- as.numeric(sub("^--nc=", "", arg))
        } else if (arg == "--nc" && i < length(args)) {
            case_count <- as.numeric(args[i + 1])
            i <- i + 1
        } else if (startsWith(arg, "--ne=")) {
            eff_sample_size <- as.numeric(sub("^--ne=", "", arg))
        } else if (arg == "--ne" && i < length(args)) {
            eff_sample_size <- as.numeric(args[i + 1])
            i <- i + 1
        } else if (arg == "--no-version") {
            no_version <- TRUE
        } else if (startsWith(arg, "--output=")) {
            output_file <- sub("^--output=", "", arg)
        } else if (arg == "--output" && i < length(args)) {
            output_file <- args[i + 1]
            i <- i + 1
        } else if (startsWith(arg, "--output-type=")) {
            output_type <- sub("^--output-type=", "", arg)
        } else if (arg == "--output-type" && i < length(args)) {
            output_type <- args[i + 1]
            i <- i + 1
        } else if (startsWith(arg, "--threads=")) {
            threads <- as.integer(sub("^--threads=", "", arg))
        } else if (arg == "--threads" && i < length(args)) {
            threads <- as.integer(args[i + 1])
            i <- i + 1
        } else if (startsWith(arg, "--write-index=")) {
            write_index <- sub("^--write-index=", "", arg)
        } else if (arg == "--write-index") {
            write_index <- TRUE
        }
    }
    # Handle positional argument (input file)
    else if (!startsWith(arg, "-")) {
        input_file <- arg
    }

    i <- i + 1
}

# Check if required parameters are provided
if (is.null(input_file)) {
    cat("Error: Input file must be specified\n", file = stderr())
    ShowHelp()
    quit(status = 1)
}

# Check for column definition (need either preset or headers file)
if (is.null(preset_columns) && is.null(headers_file)) {
    cat("Error: Either column preset (-c/--columns) or headers mapping file (-C/--headers-file) must be specified\n", file = stderr())
    quit(status = 1)
}

if (!is.null(preset_columns) && !is.null(headers_file)) {
    cat("Warning: Both column preset and headers file specified. Using column preset.\n", file = stderr())
    headers_file <- NULL
}

# Check for reference genome
if (is.null(fasta_file) && is.null(fai_file)) {
    cat("Error: Reference FASTA file (-f/--fasta) or FAI index (--fai) must be specified\n", file = stderr())
    quit(status = 1)
}

# Display configuration
cat("Converting summary statistics with the following settings:\n")
cat("  Input file: ", input_file, "\n")
if (!is.null(preset_columns)) cat("  Column preset: ", preset_columns, "\n")
if (!is.null(headers_file)) cat("  Headers file: ", headers_file, "\n")
if (!is.null(fasta_file)) cat("  Reference FASTA: ", fasta_file, "\n")
if (!is.null(fai_file)) cat("  Reference FAI: ", fai_file, "\n")
if (!is.null(cache_size)) cat("  Cache size: ", cache_size, "\n")
if (!is.null(iffy_tag)) cat("  Iffy tag: ", iffy_tag, "\n")
if (!is.null(mismatch_tag)) cat("  Mismatch tag: ", mismatch_tag, "\n")
if (!is.null(study_name)) cat("  Study name: ", study_name, "\n")
if (!is.null(sample_size)) cat("  Sample size: ", sample_size, "\n")
if (!is.null(case_count)) cat("  Case count: ", case_count, "\n")
if (!is.null(eff_sample_size)) cat("  Effective sample size: ", eff_sample_size, "\n")
if (no_version) cat("  No version info: TRUE\n")
if (!is.null(output_file)) cat("  Output file: ", output_file, "\n")
if (!is.null(output_type)) cat("  Output type: ", output_type, "\n")
if (!is.null(threads)) cat("  Threads: ", threads, "\n")
if (!is.null(write_index)) cat("  Write index: ", write_index, "\n")

# Build the command arguments
cmd_args <- list()

# Add main arguments
if (!is.null(preset_columns)) cmd_args$Columns <- preset_columns
if (!is.null(headers_file)) cmd_args$ColumnsFile <- headers_file
if (!is.null(fasta_file)) cmd_args$FastaRef <- fasta_file
if (!is.null(fai_file)) cmd_args$FaiFile <- fai_file
if (!is.null(study_name)) cmd_args$SampleName <- study_name

# Add optional arguments if provided
if (!is.null(cache_size)) cmd_args$CacheSize <- cache_size
if (!is.null(iffy_tag)) cmd_args$IffyTag <- iffy_tag
if (!is.null(mismatch_tag)) cmd_args$MismatchTag <- mismatch_tag
if (!is.null(sample_size)) cmd_args$NumSamples <- sample_size
if (!is.null(case_count)) cmd_args$NumCases <- case_count
if (!is.null(eff_sample_size)) cmd_args$EffSampleSize <- eff_sample_size
if (no_version) cmd_args$NoVersion <- TRUE
if (!is.null(output_file)) cmd_args$OutputFile <- output_file
if (!is.null(output_type)) cmd_args$OutputType <- output_type
if (!is.null(threads)) cmd_args$NumThreads <- threads
if (!is.null(write_index)) cmd_args$WriteIndex <- write_index

# Call the function with specified arguments
tryCatch(
    {
        result <- do.call(RBCFLib::BCFToolsMunge, c(list(input_file), cmd_args))
        cat("\nConversion completed successfully!\n")
    },
    error = function(e) {
        cat("Error converting summary statistics:\n", e$message, "\n", file = stderr())
        quit(status = 1)
    }
)
