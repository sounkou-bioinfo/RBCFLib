#!/usr/bin/env Rscript

# BCFToolsScore - Command-line interface for BCFTools score
# Usage: BCFToolsScore [options] <input_vcf>
#
# Compute polygenic scores from genotype data

suppressPackageStartupMessages(library(RBCFLib))

# Define usage info
usage <- function() {
    cat("Usage: BCFToolsScore [options] <input_vcf>\n")
    cat("\nOptions:\n")
    cat("  -s, --scores FILE         File containing weights for variants\n")
    cat("      --samples-file FILE   File of sample names to include\n")
    cat("  -r, --regions REGION      Restrict to comma-separated list of regions\n")
    cat("      --regions-file FILE   Restrict to regions listed in file\n")
    cat("  -t, --targets REGION      Similar to --regions but streams rather than index-jumps\n")
    cat("      --targets-file FILE   Similar to --regions-file but streams rather than index-jumps\n")
    cat("      --samples LIST        List of samples to include\n")
    cat("      --format FMT          Format field to use for scoring (GT/DS)\n")
    cat("      --score-column COL    Column name or number (1-based) in scores file containing weights\n")
    cat("  -o, --output-file FILE    Write output to a file\n")
    cat("  -O, --output-type TYPE    b: compressed BCF, u: uncompressed BCF, z: compressed VCF, v: uncompressed VCF\n")
    cat("      --columns LIST        Comma-separated list of columns to output\n")
    cat("      --threads INT         Number of extra output compression threads [0]\n")
    cat("  -W, --write-index         Automatically index the output file\n")
    cat("      --tsv                 Force output in TSV format\n")
    cat("  -i, --include EXPR        Include sites for which the expression is true\n")
    cat("  -e, --exclude EXPR        Exclude sites for which the expression is true\n")
    cat("      --use-id              Use variant IDs instead of coordinates for alignment\n")
    cat("      --q-score-thr FLOAT   Apply weights only if quality score exceeds threshold\n")
    cat("  -h, --help                Show this help message and exit\n")
    quit(status = 0)
}

# Process command line arguments
args <- commandArgs(trailingOnly = TRUE)
if (length(args) == 0 || "--help" %in% args || "-h" %in% args) {
    usage()
}

# Initialize parameter list
params <- list(
    scores = NULL,
    samples_file = NULL,
    regions = NULL,
    regions_file = NULL,
    targets = NULL,
    targets_file = NULL,
    samples = NULL,
    format = NULL,
    score_column = NULL,
    output_file = NULL,
    output_type = NULL,
    columns = NULL,
    threads = NULL,
    write_index = FALSE,
    tsv = FALSE,
    include = NULL,
    exclude = NULL,
    use_id = FALSE,
    q_score_thr = NULL
)

# Parse arguments
i <- 1
input_vcf <- NULL

while (i <= length(args)) {
    arg <- args[i]
    if (arg %in% c("-s", "--scores") && i < length(args)) {
        params$scores <- args[i + 1]
        i <- i + 2
    } else if (arg == "--samples-file" && i < length(args)) {
        params$samples_file <- args[i + 1]
        i <- i + 2
    } else if (arg %in% c("-r", "--regions") && i < length(args)) {
        params$regions <- args[i + 1]
        i <- i + 2
    } else if (arg == "--regions-file" && i < length(args)) {
        params$regions_file <- args[i + 1]
        i <- i + 2
    } else if (arg %in% c("-t", "--targets") && i < length(args)) {
        params$targets <- args[i + 1]
        i <- i + 2
    } else if (arg == "--targets-file" && i < length(args)) {
        params$targets_file <- args[i + 1]
        i <- i + 2
    } else if (arg == "--samples" && i < length(args)) {
        params$samples <- args[i + 1]
        i <- i + 2
    } else if (arg == "--format" && i < length(args)) {
        params$format <- args[i + 1]
        i <- i + 2
    } else if (arg == "--score-column" && i < length(args)) {
        params$score_column <- args[i + 1]
        i <- i + 2
    } else if (arg %in% c("-o", "--output-file") && i < length(args)) {
        params$output_file <- args[i + 1]
        i <- i + 2
    } else if (arg %in% c("-O", "--output-type") && i < length(args)) {
        params$output_type <- args[i + 1]
        i <- i + 2
    } else if (arg == "--columns" && i < length(args)) {
        params$columns <- args[i + 1]
        i <- i + 2
    } else if (arg == "--threads" && i < length(args)) {
        params$threads <- as.integer(args[i + 1])
        i <- i + 2
    } else if (arg %in% c("-W", "--write-index")) {
        params$write_index <- TRUE
        i <- i + 1
    } else if (arg == "--tsv") {
        params$tsv <- TRUE
        i <- i + 1
    } else if (arg %in% c("-i", "--include") && i < length(args)) {
        params$include <- args[i + 1]
        i <- i + 2
    } else if (arg %in% c("-e", "--exclude") && i < length(args)) {
        params$exclude <- args[i + 1]
        i <- i + 2
    } else if (arg == "--use-id") {
        params$use_id <- TRUE
        i <- i + 1
    } else if (arg == "--q-score-thr" && i < length(args)) {
        params$q_score_thr <- as.numeric(args[i + 1])
        i <- i + 2
    } else if (substring(arg, 1, 1) == "-") {
        cat("Unknown option:", arg, "\n")
        usage()
    } else {
        # This must be the input VCF
        input_vcf <- arg
        i <- i + 1
    }
}

# Check if input VCF is provided
if (is.null(input_vcf)) {
    cat("Error: Input VCF file must be specified\n")
    usage()
}

# Execute the function
result <- BCFToolsScore(
    InputFileName = input_vcf,
    ScoresFile = params$scores,
    SamplesFile = params$samples_file,
    Regions = params$regions,
    RegionsFile = params$regions_file,
    Targets = params$targets,
    TargetsFile = params$targets_file,
    Samples = params$samples,
    Format = params$format,
    ScoresColumn = params$score_column,
    OutputFile = params$output_file,
    OutputType = params$output_type,
    OutputColumns = params$columns,
    NumThreads = params$threads,
    WriteIndex = params$write_index,
    TSV = params$tsv,
    IncludeFilter = params$include,
    ExcludeFilter = params$exclude,
    VariantID = params$use_id,
    QScoreThreshold = params$q_score_thr
)

# Print command and exit status
cat("Command:", result$command, "\n")
cat("Exit status:", result$status, "\n")

# Print any stderr messages
if (!is.null(result$stderr)) {
    cat("\nStandard Error:\n")
    cat(result$stderr, sep = "\n")
}

# Exit with the same status as the command
quit(status = result$status)
