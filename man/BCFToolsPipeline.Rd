% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/BCFToolsPipeline.R
\name{BCFToolsPipeline}
\alias{BCFToolsPipeline}
\title{Create a pipeline of multiple BCFTools commands}
\usage{
BCFToolsPipeline(
  ...,
  catchStdout = TRUE,
  catchStderr = TRUE,
  saveStdout = NULL
)
}
\arguments{
\item{...}{A series of command specifications, where each specification consists of:
\itemize{
\item A character string specifying the bcftools command
\item A character vector of arguments for the command
}}

\item{catchStdout}{Logical; whether to capture standard output from the last command (default: TRUE)}

\item{catchStderr}{Logical; whether to capture standard error from all commands (default: TRUE)}

\item{saveStdout}{Character; file path where to save standard output, or NULL (default: NULL)}
}
\value{
A named list with elements:
\describe{
\item{status}{Integer vector with exit statuses of all commands (0 for success, non-zero for errors)}
\item{stdout}{Character vector of captured standard output lines from the last command, or NULL if not captured}
\item{stderr}{Character vector of captured standard error lines from all commands, or NULL if not captured}
\item{command}{Character vector representing the full piped bcftools command sequence invoked}
}
}
\description{
Executes a sequence of bcftools commands in a pipeline, where the output of each command
is used as input for the next command, similar to chaining multiple Unix pipe operators (|).
}
\examples{
\dontrun{
# Pipeline of three commands: view, filter, annotate
vcfFile <- system.file("exdata", "imputed.gt.vcf.gz", package = "RBCFLib")
result <- BCFToolsPipeline(
  "view", c("-r", "chr1:1000-2000"), 
  "view", c("-i", "QUAL>20"),
  "annotate", c("-x", "INFO")
)

# Filter, sort and index, saving to a file
outFile <- tempfile(fileext = ".vcf")
BCFToolsPipeline(
  "view", c("-i", "'DP>30'", vcfFile),
  "sort", character(),
  "view", c("-Oz"),
  saveStdout = outFile
)
}

}
