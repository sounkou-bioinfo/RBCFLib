#!/bin/sh
# copied mainly  from https://github.com/Zilong-Li/vcfppR/blob/main/configure 
# And https://github.com/sounkou-bioinfo/bcflib/blob/main/src/Makevars
set -eu
THISDir=`dirname $0`
THISDir=`realpath ${THISDir}`
MAKE=`"${R_HOME}/bin/R" CMD config MAKE`
CC=`"${R_HOME}/bin/R" CMD config CC`
AR=`"${R_HOME}/bin/R" CMD config AR`
RANLIB=`"${R_HOME}/bin/R" CMD config RANLIB`
R_CPPFLAGS=`"${R_HOME}/bin/R" CMD config CPPFLAGS`
R_CFLAGS=`"${R_HOME}/bin/R" CMD config CFLAGS`
R_CPICFLAGS=`"${R_HOME}/bin/R" CMD config CPICFLAGS`
R_LDFLAGS=`"${R_HOME}/bin/R" CMD config LDFLAGS`
HTSLIB_BUNDLED_MK=${THISDir}/inst/makefiles/htscodecs_bundled.mk
RSCRIPT="${R_HOME}/bin/Rscript"
PGS_MK_IN=${THISDir}/src/bcftools-1.22/plugins/pgs.mk.in
# -fPIC is ensential for shared lib
# CFLAGS="${R_CFLAGS} ${R_CPICFLAGS} -fPIC -D_FILE_OFFSET_BITS=64"
CFLAGS="-Wall -g -O2 -fPIC -D_FILE_OFFSET_BITS=64"
# remove assert by defining NDEBUG
CPPFLAGS="${R_CPPFLAGS} -DNDEBUG"
LDFLAGS="${R_LDFLAGS}"

HTSLIB_DIR="${THISDir}/src/bcftools-1.22/htslib-1.22"
HTS_FILE="${THISDir}/src/bcftools-1.22/libhts.a"
BCFTOOLS_DIR="${THISDir}/src/bcftools-1.22"

# Check for CHOLMOD
HAVE_CHOLMOD="no"
CHOLMOD_CPPFLAGS=""
CHOLMOD_LIBS=""

if pkg-config --exists cholmod 2>/dev/null; then
  echo "Found CHOLMOD via pkg-config"
  # Test if we can actually compile with CHOLMOD
  if echo '#include <cholmod.h>
int main() { cholmod_common c; return 0; }' | \
     ${CC} ${CFLAGS} $(pkg-config --cflags cholmod 2>/dev/null) -x c - $(pkg-config --libs cholmod 2>/dev/null) -o /dev/null 2>/dev/null; then
    HAVE_CHOLMOD="yes"
    CHOLMOD_CPPFLAGS=$(pkg-config --cflags cholmod)
    CHOLMOD_LIBS=$(pkg-config --libs cholmod)
    echo "CHOLMOD linking test passed - BCFToolsPGS will be enabled"
  else
    echo "CHOLMOD found via pkg-config but linking test failed - BCFToolsPGS will be disabled"
  fi
else
  echo "CHOLMOD not found via pkg-config"
  
  # Try to compile with just -lcholmod (assume headers are in standard paths)
  echo "Trying to find CHOLMOD in standard system paths..."
  if echo '#include <cholmod.h>
int main() { cholmod_common c; return 0; }' | \
     ${CC} ${CFLAGS} -x c - -lcholmod -o /dev/null 2>/dev/null; then
    HAVE_CHOLMOD="yes"
    CHOLMOD_CPPFLAGS=""
    CHOLMOD_LIBS="-lcholmod"
    echo "CHOLMOD found in system paths - BCFToolsPGS will be enabled"
  else
    echo "CHOLMOD not found in system paths either"
    # check if matrix package is installed
    #if "${RSCRIPT}" -e 'if (!requireNamespace("Matrix", quietly=TRUE)) quit(status=1)' 2>/dev/null; then
     # MATRIX_DIR=$("${RSCRIPT}" -e 'cat(system.file("libs", package="Matrix"))' 2>/dev/null)
     # CHOLMOD_CPPFLAGS="-I${MATRIX_DIR}/../include"
     # CHOLMOD_LIBS="-L${MATRIX_DIR}"
     # HAVE_CHOLMOD="yes"
     # if [ -d "${MATRIX_DIR}" ]; then
     #   echo "Matrix package found at ${MATRIX_DIR}"
     # fi
    #fi
  fi
fi

# Check for GSL
HAVE_GSL="no"
USE_GPL=""
GSL_LIBS=""
GSL_CFLAGS=""

if command -v gsl-config >/dev/null 2>&1; then
  echo "Found GSL via gsl-config"
  echo "GSL version: $(gsl-config --version)"
  echo "GSL libs: $(gsl-config --libs)"
  echo "GSL cflags: $(gsl-config --cflags)"
  
  # Test if we can actually link against the same GSL function that bcftools tests for
  echo "Testing if gsl_multifit_gradient function is available..."
  if echo 'char gsl_multifit_gradient (void);
int main (void) { 
  return gsl_multifit_gradient (); 
}' | \
     ${CC} ${CFLAGS} $(gsl-config --cflags) -x c - -lgsl -lgslcblas -lm -o /dev/null 2>/dev/null; then
    HAVE_GSL="yes"
    USE_GPL="1"
    GSL_LIBS=$(gsl-config --libs)
    GSL_CFLAGS=$(gsl-config --cflags)
    # Add -DUSE_GSL to CPPFLAGS when GSL is available
    CPPFLAGS="${CPPFLAGS} -DUSE_GSL ${GSL_CFLAGS}"
    echo "GSL linking test passed - polysomy functionality will be enabled"
  else
    echo "GSL found but linking test failed - polysomy functionality will be disabled"
    echo "This may be due to GSL version incompatibility (GSL 2.x removes gsl_multifit_gradient)"
    echo "Either configure with --disable-libgsl or resolve this error to build bcftools."
  fi
else
  echo "gsl-config not found, polysomy functionality will be disabled"
  echo "WARNING: GSL development files not found. Install libgsl-dev (Debian/Ubuntu) or gsl-devel (RPM-based) for polysomy support."
  echo "Continuing with --disable-libgsl to prevent build failure."
fi
echo ${HAVE_CHOLMOD} ${CHOLMOD_CPPFLAGS} ${CHOLMOD_LIBS}
echo "----------Configuring HTSlib in $HTSLIB_DIR-----------------"
cd $HTSLIB_DIR

./configure \
    CFLAGS="${CFLAGS}" \
    --enable-plugins

## copy file instead of symbolic linking
rm -f htscodecs.mk && cp "${HTSLIB_BUNDLED_MK}" htscodecs.mk

export CC="${CC}"
export CPPFLAGS="${CPPFLAGS}"
export AR="${AR}"
export RANLIB="${RANLIB}"
${MAKE} libhts.a

EXTRA_LIBS="-lz -lm -lbz2 -llzma -lcurl"

if grep -wq "#define HAVE_LIBDEFLATE 1" config.h;then
    EXTRA_LIBS="${EXTRA_LIBS} -ldeflate"
fi

# bcftools static library build against htslib static library
echo "----------Configuring BCFtools in $BCFTOOLS_DIR-----------------"
cd  ${BCFTOOLS_DIR} || exit

# Configure bcftools with proper installation directory and plugin paths
BCFTOOLS_PREFIX="${THISDir}/inst/bin"
BCFTOOLS_PLUGIN_DIR="plugins"

# Add CHOLMOD and GSL flags if available  
BCFTOOLS_CONFIGURE_FLAGS="--prefix=${BCFTOOLS_PREFIX}"

echo "HAVE_GSL status: ${HAVE_GSL}"
if [ "$HAVE_GSL" = "yes" ]; then
    echo "Enabling GSL in bcftools configure with --enable-libgsl"
    BCFTOOLS_CONFIGURE_FLAGS="${BCFTOOLS_CONFIGURE_FLAGS} --enable-libgsl"
else
    echo "Disabling GSL in bcftools configure with --disable-libgsl"
    BCFTOOLS_CONFIGURE_FLAGS="${BCFTOOLS_CONFIGURE_FLAGS} --disable-libgsl"
fi
echo "Final bcftools configure flags: ${BCFTOOLS_CONFIGURE_FLAGS}"

# Add CHOLMOD flags to CPPFLAGS and LIBS for plugin compilation
if [ "$HAVE_CHOLMOD" = "yes" ]; then
    CPPFLAGS="${CPPFLAGS} ${CHOLMOD_CPPFLAGS}"
    EXTRA_LIBS="${EXTRA_LIBS} ${CHOLMOD_LIBS}"
fi

# Add GSL libraries to EXTRA_LIBS for plugin compilation
if [ "$HAVE_GSL" = "yes" ]; then
    EXTRA_LIBS="${EXTRA_LIBS} ${GSL_LIBS}"
fi

# Ensure GSL flags are available for bcftools configure
if [ "$HAVE_GSL" = "yes" ]; then
    export GSL_CFLAGS="${GSL_CFLAGS}"
    export GSL_LIBS="${GSL_LIBS}"
fi
export HAVE_CHOLMOD="${HAVE_CHOLMOD}"
export CHOLMOD_CPPFLAGS="${CHOLMOD_CPPFLAGS}"
export CHOLMOD_LIBS="${CHOLMOD_LIBS}"
#HAVE_CHOLMOD=@HAVE_CHOLMOD@
#CHOLMOD_LIBS=@CHOLMOD_LIBS@
#CHOLMOD_CPPFLAGS=@CHOLMOD_CPPFLAGS@
sed \
    -e "s|@HAVE_CHOLMOD@|${HAVE_CHOLMOD}|g" \
    -e "s|@CHOLMOD_LIBS@|${CHOLMOD_LIBS}|g" \
    -e "s|@CHOLMOD_CPPFLAGS@|${CHOLMOD_CPPFLAGS}|g" \
    "${PGS_MK_IN}" > "${PGS_MK_IN%.in}"

./configure \
    ${BCFTOOLS_CONFIGURE_FLAGS} \
    CFLAGS="${CFLAGS}" \
    CPPFLAGS="${CPPFLAGS}" \
    LDFLAGS="${LDFLAGS}"

# Build the bcftools executable and plugins with dependency flags
export CC="${CC}"
export AR="${AR}"
export RANLIB="${RANLIB}"
if [ "$HAVE_CHOLMOD" = "yes" ]; then
    export HAVE_CHOLMOD=1
    export CHOLMOD_LIBS="${CHOLMOD_LIBS}"
fi
if [ "$HAVE_GSL" = "yes" ]; then
    export USE_GPL=1
    export GSL_LIBS="${GSL_LIBS}"
fi
${MAKE} -f Makefile bcftools
${MAKE} -f Makefile plugins

cd ${THISDir} || exit
echo "Create Makevars file"
sed \
    -e "s|@EXTRA_CPPFLAGS@|${CPPFLAGS}|g" \
    -e "s|@EXTRA_LIBS@|${EXTRA_LIBS}|g" \
    -e "s|@HAVE_CHOLMOD@|${HAVE_CHOLMOD}|g" \
    -e "s|@CHOLMOD_CPPFLAGS@|${CHOLMOD_CPPFLAGS}|g" \
    -e "s|@CHOLMOD_LIBS@|${CHOLMOD_LIBS}|g" \
    -e "s|@HAVE_GSL@|${HAVE_GSL}|g" \
    -e "s|@GSL_LIBS@|${GSL_LIBS}|g" \
    -e "s|@USE_GPL@|${USE_GPL}|g" \
    src/Makevars.in > src/Makevars
